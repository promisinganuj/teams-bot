name: Deploy Teams Bot to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -r requirements.txt
        uv pip install --system pytest pytest-asyncio

    - name: Run tests
      run: |
        python -m pytest tests/ -v || echo "No tests found"

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system -r requirements.txt

    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deploy
        rsync -av --exclude=deploy . deploy/
        cd deploy
        
        # Remove unnecessary files for deployment
        rm -rf .git .github tests .pytest_cache __pycache__
        rm -rf .env .env.* *.md infra/ scripts/
        
        # Create zip package
        zip -r ../bot-deployment.zip . -x "*.pyc" "*.pyo" "*__pycache__*"
        cd ..

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./bot-deployment.zip

    - name: Upload Teams App Manifest
      if: success()
      run: |
        python scripts/upload_manifest.py
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.GRAPH_CLIENT_ID }}
        CLIENT_SECRET: ${{ secrets.GRAPH_CLIENT_SECRET }}
        BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
        AZURE_WEBAPP_DOMAIN: ${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net

  terraform:
    name: Terraform Plan/Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[terraform]')
    
    defaults:
      run:
        working-directory: ./infra
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="bot_app_id=${{ secrets.BOT_APP_ID }}" \
          -var="bot_app_password=${{ secrets.BOT_APP_PASSWORD }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.event_name == 'push'
      run: terraform apply -auto-approve tfplan
